/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_NOTIFY_H
#define OSG_NOTIFY_H 1

#include <osg/Export>
#include <osg/Referenced> // for NotifyHandler

#include <ostream>

namespace osg {

/** Range of notify levels from DEBUG_FP through to FATAL, ALWAYS
  * is reserved for forcing the absorption of all messages.  The
  * keywords are also used verbatim when specified by the environmental
  * variable OSGNOTIFYLEVEL or OSG_NOTIFY_LEVEL.
  * See documentation on osg::notify() for further details.
  */
enum NotifySeverity {
	SYSERR = 0,
	FATAL  =1,
	_ERROR =2,
    WARN   =3,
    INFO   =4,
    DEBUG  =5
};

/** set the notify level, overriding the default or the value set by
  * the environmental variable OSGNOTIFYLEVEL or OSG_NOTIFY_LEVEL.
  */
//class NotifySingleton;
extern OSG_EXPORT void setNotifyLevel(NotifySeverity severity);

/** get the notify level. */
extern OSG_EXPORT NotifySeverity getNotifyLevel();

/** initialize notify level. */
extern OSG_EXPORT bool initNotifyLevel();

#ifdef OSG_NOTIFY_DISABLED
    inline bool isNotifyEnabled(NotifySeverity) { return false; }
#else
    /** is notification enabled, given the current setNotifyLevel() setting? */
    extern OSG_EXPORT bool isNotifyEnabled(NotifySeverity severity);
#endif

/** notify messaging function for providing fatal through to verbose
  * debugging messages.  Level of messages sent to the console can
  * be controlled by setting the NotifyLevel either within your
  * application or via the an environmental variable i.e.
  * - setenv OSGNOTIFYLEVEL DEBUG (for tsh)
  * - export OSGNOTIFYLEVEL=DEBUG (for bourne shell)
  * - set OSGNOTIFYLEVEL=DEBUG (for Windows)
  *
  * All tell the osg to redirect all debugging and more important messages
  * to the notification stream (useful for debugging) setting ALWAYS will force
  * all messages to be absorbed, which might be appropriate for final
  * applications.  Default NotifyLevel is NOTICE.  Check the enum
  * #NotifySeverity for full range of possibilities.  To use the notify
  * with your code simply use the notify function as a normal file
  * stream (like std::cout) i.e
  * @code
  * osg::notify(osg::DEBUG) << "Hello Bugs!" << std::endl;
  * @endcode
  * @see setNotifyLevel, setNotifyHandler
  */
extern OSG_EXPORT std::ostream& notify(const NotifySeverity severity);

inline std::ostream& notify(void) { return notify(osg::INFO); }

#define OSG_NOTIFY(level) if (osg::isNotifyEnabled(level)) osg::notify(level)

#define OSG_SYSERR OSG_NOTIFY(osg::SYSERR)
#define OSG_ALWAYS OSG_NOTIFY(osg::FATAL)
#define OSG_ERROR OSG_NOTIFY(osg::_ERROR)
#define OSG_WARN OSG_NOTIFY(osg::WARN)
//#define OSG_NOTICE OSG_NOTIFY(osg::NOTICE)
#define OSG_INFO OSG_NOTIFY(osg::INFO)
#define OSG_DEBUG OSG_NOTIFY(osg::DEBUG)
//#define OSG_DEBUG_FP OSG_NOTIFY(osg::DEBUG_FP)

//FATAL_LOG 使用这个宏输出日志信息时，是不期望程序往下执行的致命错误
#define SYSERR_LOG OSG_SYSERR<<" "<<__FUNCTION__<<" "<<__LINE__<<" "
//FATAL_LOG 使用这个宏输出日志信息时，是不期望程序往下执行的致命错误
#define FATAL_LOG OSG_ALWAYS<<" "<<__FUNCTION__<<" "<<__LINE__<<" "
//ERROR_LOG 使用这个宏输出日志信息时，用于提示 不期望程序往下执行的错误(这种用FATAL_LOG替代也行）。
//但是在某些特殊情况下需要进行严重错误提醒的日志，但是又允许程序继续执行，那么用ERROR_LOG更合理
#define ERROR_LOG OSG_ERROR<<" "<<__FUNCTION__<<" "<<__LINE__<<" "
//WARN_LOG 使用这个宏输出日志信息时，程序出错了，但是不影响程序继续往下执行。
#define WARN_LOG OSG_WARN<<" "<<__FUNCTION__<<" "<<__LINE__<<" "
//WARN_LOG 使用这个宏输出日志信息时，它一般用于打印程序执行到某一个业务点的提示，比如当前卡执行了A模型的B分支
#define INFO_LOG OSG_INFO<<" "<<__FUNCTION__<<" "<<__LINE__<<" "
//DEBUG_LOG 使用这个宏输出日志信息时，主要用于内存释放的提示，一般是框架人员需要使用。业务开发员一般不关心
#define DEBUG_LOG OSG_DEBUG<<" "<<__FUNCTION__<<" "<<__LINE__<<" "


/** Handler processing output of notification stream. It acts as a sink to
  * notification messages. It is called when notification stream needs to be
  * synchronized (i.e. after osg::notify() << std::endl).
  * StandardNotifyHandler is used by default, it writes notifications to stderr
  * (severity <= WARN) or stdout (severity > WARN).
  * Notifications can be redirected to other sinks such as GUI widgets or
  * windows debugger (WinDebugNotifyHandler) with custom handlers.
  * Use setNotifyHandler to set custom handler.
  * Note that osg notification API is not thread safe although notification
  * handler is called from many threads. When incorporating handlers into GUI
  * widgets you must take care of thread safety on your own.
  * @see setNotifyHandler
  */
class OSG_EXPORT NotifyHandler : public osg::Referenced
{
public:
    virtual void notify(osg::NotifySeverity severity, const char *message) = 0;
};

/** Set notification handler, by default StandardNotifyHandler is used.
  * @see NotifyHandler
  */
extern OSG_EXPORT void setNotifyHandler(NotifyHandler *handler);

/** Get currrent notification handler. */
extern OSG_EXPORT NotifyHandler *getNotifyHandler();

/** Redirects notification stream to stderr (severity <= WARN) or stdout (severity > WARN).
  * The fputs() function is used to write messages to standard files. Note that
  * std::out and std::cerr streams are not used.
  * @see setNotifyHandler
  */
class OSG_EXPORT StandardNotifyHandler : public NotifyHandler
{
public:
    void notify(osg::NotifySeverity severity, const char *message);
};

#if defined(WIN32) && !defined(__CYGWIN__)

/** Redirects notification stream to windows debugger with use of
  * OuputDebugString functions.
  * @see setNotifyHandler
  */
class OSG_EXPORT WinDebugNotifyHandler : public NotifyHandler
{
public:
    void notify(osg::NotifySeverity severity, const char *message);
};

#endif

template<typename T, typename R>
T convertPointerType(R src)
{
	T dest;
	memcpy(&dest, &src, sizeof(src));
	return dest;
}
}

#endif
